var searchData=
[
  ['test_5fcase',['TEST_CASE',['../shared__ptr__access_8cpp.html#af00ad6cc204c5b5f7c0bc1f511960734',1,'TEST_CASE(&quot;shared_ptr get returns correctly with nullptr&quot;, &quot;[shared_ptr][access][nullptr]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__access_8cpp.html#a13bf4325a427b6b4b8ae6ecf17a2e880',1,'TEST_CASE(&quot;shared_ptr get returns correct address&quot;, &quot;[shared_ptr][access]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__access_8cpp.html#af91235d2ef41092b56f248f980484bf3',1,'TEST_CASE(&quot;shared_ptr dereference via * throws on nullptr&quot;, &quot;[shared_ptr][dereference][nullptr]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__access_8cpp.html#a75183e66bb80e73bf6295fed18457956',1,'TEST_CASE(&quot;shared_ptr dereference via -&gt; throws on nullptr&quot;, &quot;[shared_ptr][dereference][nullptr]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__access_8cpp.html#a86e524268737f407fe128c389770a3a7',1,'TEST_CASE(&quot;type specific shared_ptr exceptions are caught by base exception&quot;, &quot;[shared_ptr][exception]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__access_8cpp.html#a5dddcc966d86d5908d9e28de865f86e6',1,'TEST_CASE(&quot;type specific shared_ptr exceptions are caught by using correct type&quot;, &quot;[shared_ptr][exception]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__access_8cpp.html#a9ed46ba95680b3cc64a7d751335b50b3',1,'TEST_CASE(&quot;shared_ptr exceptions have non-empty what()&quot;, &quot;[shared_ptr][exception]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__access_8cpp.html#a9ce19f7da3e186aa28ea929bc5d04824',1,'TEST_CASE(&quot;shared_ptr use count works&quot;, &quot;[shared_ptr][use count]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__access_8cpp.html#a363aeead6e6972d7c7abddaa49e242d6',1,'TEST_CASE(&quot;operator bool works&quot;, &quot;[shared_ptr]&quot;):&#160;shared_ptr_access.cpp'],['../shared__ptr__assignment_8cpp.html#a2134da83e3715a506d7cef7a637406ac',1,'TEST_CASE(&quot;assignment from throwing::shared_ptr&quot;, &quot;[shared_ptr][assignment]&quot;):&#160;shared_ptr_assignment.cpp'],['../shared__ptr__assignment_8cpp.html#a81c3203edb14af722f4010949ad24be8',1,'TEST_CASE(&quot;assignment from std::shared_ptr&quot;, &quot;[shared_ptr][assignment]&quot;):&#160;shared_ptr_assignment.cpp'],['../shared__ptr__assignment_8cpp.html#a23d8ee1442c31685050ccb6b3c248f08',1,'TEST_CASE(&quot;assignment from throwing::shared_ptr to derived class&quot;, &quot;[shared_ptr][assignment]&quot;):&#160;shared_ptr_assignment.cpp'],['../shared__ptr__assignment_8cpp.html#afbec99f064b0f79182e11eb69c0fa813',1,'TEST_CASE(&quot;assignment from std::shared_ptr to derived class&quot;, &quot;[shared_ptr][assignment]&quot;):&#160;shared_ptr_assignment.cpp'],['../shared__ptr__assignment_8cpp.html#ab6d9d48646347d7d6777f8c1f098ddf1',1,'TEST_CASE(&quot;move assignment from throwing::shared_ptr to derived class&quot;, &quot;[shared_ptr][assignment]&quot;):&#160;shared_ptr_assignment.cpp'],['../shared__ptr__assignment_8cpp.html#a32b7cc5789a73a44803981cae31cbe82',1,'TEST_CASE(&quot;move assignment from std::shared_ptr to derived class&quot;, &quot;[shared_ptr][assignment]&quot;):&#160;shared_ptr_assignment.cpp'],['../shared__ptr__atomic_8cpp.html#a1c003c506e7765c4a34611e948031f10',1,'TEST_CASE(&quot;atomic_is_lock_free std::shared_ptr compatibility&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a7b004aeeb8b941a9f0d1ec173e3e6de7',1,'TEST_CASE(&quot;atomic_load works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#abd65186931d253c32fe68f4fb85719e0',1,'TEST_CASE(&quot;atomic_load_explicit works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a44e4f789500d1136403e6cf5ad60d5cb',1,'TEST_CASE(&quot;atomic_store works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a214fb4d774c5766fdead5f311939851d',1,'TEST_CASE(&quot;atomic_store_explicit works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a9488e150958d2e5e56fe33ff66462dc2',1,'TEST_CASE(&quot;atomic_exchange works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a2bc9666fbdaddedea652da721055c81b',1,'TEST_CASE(&quot;atomic_exchange_explicit works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a3ba493df93d9732453127a47c22ac5ef',1,'TEST_CASE(&quot;atomic_compare_exchange_weak works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a2ae940c8532cb79c6175606b9078e9a0',1,'TEST_CASE(&quot;atomic_compare_exchange_weak works in the same thread, compares &quot; &quot;pointer, not value&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a4347bb20e7b0089288a4660696f360dc',1,'TEST_CASE(&quot;atomic_compare_exchange_strong works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a464834fdfcb00e6e8d34e6e3225673af',1,'TEST_CASE(&quot;atomic_compare_exchange_strong works in the same thread, compares &quot; &quot;pointer, not value&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a7b08c65022ab053b9be3c64db498b073',1,'TEST_CASE(&quot;atomic_compare_exchange_weak_explicit works in the same thread&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__atomic_8cpp.html#a521e0768d0288c0a8fbf14d81a0866cf',1,'TEST_CASE(&quot;atomic_compare_exchange_strong_explicit works in the same thread, &quot; &quot;compares pointer, not value&quot;, &quot;[shared_ptr][atomic]&quot;):&#160;shared_ptr_atomic.cpp'],['../shared__ptr__cast_8cpp.html#a0d7b321c252e0e99c8693d9adcae9d0d',1,'TEST_CASE(&quot;static_pointer_cast to base class&quot;, &quot;[shared_ptr][cast]&quot;):&#160;shared_ptr_cast.cpp'],['../shared__ptr__cast_8cpp.html#af5ade1a69fa0a71da65703944978c3cd',1,'TEST_CASE(&quot;dynamic_pointer_cast to derived class&quot;, &quot;[shared_ptr][cast]&quot;):&#160;shared_ptr_cast.cpp'],['../shared__ptr__cast_8cpp.html#a472b035ebe22f70e6c8de510aef0b2b5',1,'TEST_CASE(&quot;const_pointer_cast&quot;, &quot;[shared_ptr][cast]&quot;):&#160;shared_ptr_cast.cpp'],['../shared__ptr__cast_8cpp.html#aa705fbc01a2520f41806bca6f8c4175f',1,'TEST_CASE(&quot;reinterpret_pointer_cast&quot;, &quot;[shared_ptr][cast]&quot;):&#160;shared_ptr_cast.cpp'],['../shared__ptr__comparison_8cpp.html#a52f89414a76f2104ef04804840b1fb2e',1,'TEST_CASE(&quot;comparison operators between valid throwing::shared_ptr&quot;, &quot;[shared_ptr][comparison]&quot;):&#160;shared_ptr_comparison.cpp'],['../shared__ptr__comparison_8cpp.html#aecc9f0db346c5baeec1a14f79f4e573e',1,'TEST_CASE(&quot;comparison operators between valid throwing::shared_ptr and &quot; &quot;std::shared_ptr&quot;, &quot;[shared_ptr][comparison]&quot;):&#160;shared_ptr_comparison.cpp'],['../shared__ptr__comparison_8cpp.html#ac1d83b1c3417e7444ae303a67245242b',1,'TEST_CASE(&quot;comparison operators between valid throwing::shared_ptr and &quot; &quot;std::shared_ptr (other side)&quot;, &quot;[shared_ptr][comparison]&quot;):&#160;shared_ptr_comparison.cpp'],['../shared__ptr__comparison_8cpp.html#aedce08cc3f061008bc559447aeb2e2f0',1,'TEST_CASE(&quot;comparison operators with null throwing::shared_ptr&quot;, &quot;[shared_ptr][comparison]&quot;):&#160;shared_ptr_comparison.cpp'],['../shared__ptr__construction_8cpp.html#addeefe4fcdfe4046a2fe57e78fe01ba3',1,'TEST_CASE(&quot;shared_ptr constructor from pointer&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a78a11904bb2d6f4175f635ad011a90b5',1,'TEST_CASE(&quot;shared_ptr constructor from pointer and deleter&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#adaf3199df783b8ce6428f7d58a32c0f6',1,'TEST_CASE(&quot;shared_ptr constructor from pointer and lambda deleter&quot;, &quot;Construction&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a51a3420d52d4dfbb193a6c8386e39cc1',1,'TEST_CASE(&quot;shared_ptr constructor from pointer to derived class&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#abb0d0660b99947d95255970f87bdd4d0',1,'TEST_CASE(&quot;shared_ptr constructor from pointer to base type&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#acc4e1f7119e9dd3b346d6af1898e38b2',1,'TEST_CASE(&quot;shared_ptr constructor from nullptr and deleter&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a1c846a600f5ce1c36ece971519703d23',1,'TEST_CASE(&quot;shared_ptr constructor from nullptr, lambda deleter and allocator&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a5af0607ec21a95638b54f3a5964b6deb',1,'TEST_CASE(&quot;shared_ptr aliasing constructor&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a8d0e13b5eec2c405892d9bc4d2a13a85',1,'TEST_CASE(&quot;shared_ptr copy constructor&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a8a0e7db91f8e826dab6afc2cbe9814b4',1,'TEST_CASE(&quot;shared_ptr copy constructor from derived&quot;, &quot;Construction&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a59db66042ade7e9fad9b3bf1c7872843',1,'TEST_CASE(&quot;shared_ptr move constructor&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a0d36b6db8661fbe8b513b1023f2559fb',1,'TEST_CASE(&quot;shared_ptr move constructor from derived&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#ab3761ec9af295d5c16d55dfae881d661',1,'TEST_CASE(&quot;shared_ptr constructor from std::shared_ptr&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a35136f41811c8ec25af5b21837f9868d',1,'TEST_CASE(&quot;shared_ptr constructor from std::shared_ptr to derived&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#aa7e42be4f653aa71ead819a0b63a0874',1,'TEST_CASE(&quot;shared_ptr move constructor from std::shared_ptr&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a4068a203f01f350eec111af7dfb4957e',1,'TEST_CASE(&quot;shared_ptr move constructor from std::shared_ptr to derived&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#af3a136db7c4411e9c599bfd1fb3773ef',1,'TEST_CASE(&quot;shared_ptr constructor from derived std::weak_ptr&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__construction_8cpp.html#a6eacfccc125b957d8d696d95833bacdb',1,'TEST_CASE(&quot;shared_ptr move constructor from std::unique_ptr&quot;, &quot;[shared_ptr][constructor]&quot;):&#160;shared_ptr_construction.cpp'],['../shared__ptr__hash_8cpp.html#a3b1a8b9c84065f139b14ea57798ae2b3',1,'TEST_CASE(&quot;hash operator of shared_ptr&quot;, &quot;[shared_ptr][hash]&quot;):&#160;shared_ptr_hash.cpp'],['../shared__ptr__make__shared_8cpp.html#a3d8268a584a4b60487c03fa3b65c93bd',1,'TEST_CASE(&quot;make_shared struct with arguments&quot;, &quot;[shared_ptr][make_shared]&quot;):&#160;shared_ptr_make_shared.cpp'],['../shared__ptr__make__shared_8cpp.html#acd1df00465dc15dfe3dd1fa799478d39',1,'TEST_CASE(&quot;make_shared struct with no arguments&quot;, &quot;[shared_ptr][make_shared]&quot;):&#160;shared_ptr_make_shared.cpp'],['../shared__ptr__make__shared_8cpp.html#ad0cfe786fe591a277256f72ed162d4b7',1,'TEST_CASE(&quot;make_shared base type with argument&quot;, &quot;[shared_ptr][make_shared]&quot;):&#160;shared_ptr_make_shared.cpp'],['../shared__ptr__make__shared_8cpp.html#a36dd5b9a72dacc17599b0b12e0b0874c',1,'TEST_CASE(&quot;make_shared base type no arguments&quot;, &quot;[shared_ptr][make_shared]&quot;):&#160;shared_ptr_make_shared.cpp'],['../shared__ptr__make__shared_8cpp.html#a7f9e14099ec1bf4ee8219f618c0f34f4',1,'TEST_CASE(&quot;allocate_shared with arguments&quot;, &quot;[shared_ptr][allocate_shared]&quot;):&#160;shared_ptr_make_shared.cpp'],['../shared__ptr__make__shared_8cpp.html#a6e45c845befdaa82f5e9dd93a897a1a2',1,'TEST_CASE(&quot;allocate_shared with no arguments&quot;, &quot;[shared_ptr][allocate_shared]&quot;):&#160;shared_ptr_make_shared.cpp'],['../shared__ptr__make__shared_8cpp.html#a12c4f9424803c87ea2b74406123c9bda',1,'TEST_CASE(&quot;allocate_shared base type with arguments&quot;, &quot;[shared_ptr][allocate_shared]&quot;):&#160;shared_ptr_make_shared.cpp'],['../shared__ptr__make__shared_8cpp.html#a6449e227f836979b3810f2a232baec7c',1,'TEST_CASE(&quot;allocate_shared base type with no arguments&quot;, &quot;[shared_ptr][allocate_shared]&quot;):&#160;shared_ptr_make_shared.cpp'],['../shared__ptr__ordering_8cpp.html#aa3abade7d93022eae7a533c02b0c14e1',1,'TEST_CASE(&quot;owner_before of shared_ptr&quot;, &quot;[shared_ptr][ordering]&quot;):&#160;shared_ptr_ordering.cpp'],['../shared__ptr__ostream_8cpp.html#a20e4a96742bd00838ddb5f77a42e21ec',1,'TEST_CASE(&quot;operator&lt;&lt; prints stored ptr&quot;, &quot;[shared_ptr][streams]&quot;):&#160;shared_ptr_ostream.cpp'],['../shared__ptr__ostream_8cpp.html#a9ece5d9fc6481df6dc4160e32e571b8b',1,'TEST_CASE(&quot;operator&lt;&lt; prints nullptr&quot;, &quot;[shared_ptr][streams]&quot;):&#160;shared_ptr_ostream.cpp'],['../shared__ptr__reset_8cpp.html#a893af5f085fad57e60faafc59fa8ff93',1,'TEST_CASE(&quot;shared_ptr reset with no arguments clears&quot;, &quot;[shared_ptr][reset]&quot;):&#160;shared_ptr_reset.cpp'],['../shared__ptr__reset_8cpp.html#aa1bcf69c5e763e4475420d804f7db52c',1,'TEST_CASE(&quot;shared_ptr reset with pointer&quot;, &quot;[shared_ptr][reset]&quot;):&#160;shared_ptr_reset.cpp'],['../shared__ptr__reset_8cpp.html#ade5716432e79f852c59700dd6b4a540c',1,'TEST_CASE(&quot;shared_ptr reset with pointer and deleter&quot;, &quot;[shared_ptr][reset]&quot;):&#160;shared_ptr_reset.cpp'],['../shared__ptr__reset_8cpp.html#a860af73bf482005f11db705edd971995',1,'TEST_CASE(&quot;shared_ptr reset with pointer, deleter and allocator&quot;, &quot;[shared_ptr][reset]&quot;):&#160;shared_ptr_reset.cpp'],['../shared__ptr__swap_8cpp.html#a7ea045098d0dfd50f91b79293c176362',1,'TEST_CASE(&quot;shared_ptr swap swaps pointers&quot;, &quot;[shared_ptr][swap]&quot;):&#160;shared_ptr_swap.cpp'],['../shared__ptr__swap_8cpp.html#afd49cb51a7b886dd40b82ebb721bb407',1,'TEST_CASE(&quot;shared_ptr swap null pointers&quot;, &quot;[shared_ptr][swap][nullptr]&quot;):&#160;shared_ptr_swap.cpp'],['../shared__ptr__to__array_8cpp.html#ad4f08f22d7c94d73da0074f8093c515b',1,'TEST_CASE(&quot;shared_ptr to array from nullptr: get returns nullptr&quot;, &quot;[shared_ptr][array][access]&quot;):&#160;shared_ptr_to_array.cpp'],['../shared__ptr__to__array_8cpp.html#ab665c1bf54a80ab67092200bf9ed9c75',1,'TEST_CASE(&quot;shared_ptr to array: get returns first element&quot;, &quot;[shared_ptr][array][access]&quot;):&#160;shared_ptr_to_array.cpp'],['../shared__ptr__to__array_8cpp.html#a8ffe71acc90d29879801e735a2768e84',1,'TEST_CASE(&quot;dereferencing null shared_ptr to array throws&quot;, &quot;[shared_ptr][array][access]&quot;):&#160;shared_ptr_to_array.cpp'],['../shared__ptr__to__array_8cpp.html#aeeb1957234af02e720d0335b7520a195',1,'TEST_CASE(&quot;shared_ptr to array: [0] returns first element&quot;, &quot;[shared_ptr][array][access]&quot;):&#160;shared_ptr_to_array.cpp'],['../unique__ptr__access_8cpp.html#ad8ec1b28923289ca0b9db9fb8f8f5e0d',1,'TEST_CASE(&quot;unique_ptr to nullptr get returns nullptr&quot;, &quot;[unique_ptr][nullptr]&quot;):&#160;unique_ptr_access.cpp'],['../unique__ptr__access_8cpp.html#a67a0f2db78effffa1af128c46048308c',1,'TEST_CASE(&quot;unique_ptr: operator bool&quot;, &quot;[unique_ptr][bool]&quot;):&#160;unique_ptr_access.cpp'],['../unique__ptr__assignment_8cpp.html#a08bb52ce6738e6b9bee4573a359804dc',1,'TEST_CASE(&quot;move assignment from throwing::unique_ptr&quot;, &quot;[unique_ptr][assignment]&quot;):&#160;unique_ptr_assignment.cpp'],['../unique__ptr__assignment_8cpp.html#a9cb882f655ec9f5931e9f54323b2e289',1,'TEST_CASE(&quot;move assignment from throwing::unique_ptr to derived class&quot;, &quot;[unique_ptr][assignment]&quot;):&#160;unique_ptr_assignment.cpp'],['../unique__ptr__assignment_8cpp.html#a42fbe65b4b0fc40372eafd56bceca233',1,'TEST_CASE(&quot;move assignment from std::unique_ptr to derived class&quot;, &quot;[unique_ptr][assignment]&quot;):&#160;unique_ptr_assignment.cpp'],['../unique__ptr__assignment_8cpp.html#aea53367631e7d1312258b74217af25e3',1,'TEST_CASE(&quot;assignment from nullptr&quot;, &quot;[unique_ptr][assignment][nullptr]&quot;):&#160;unique_ptr_assignment.cpp'],['../unique__ptr__comparison_8cpp.html#ae2b83f6479ee9b6917351d47c96fcf34',1,'TEST_CASE(&quot;comparison operators between valid throwing::unique_ptr&quot;, &quot;[unique_ptr][comparison]&quot;):&#160;unique_ptr_comparison.cpp'],['../unique__ptr__comparison_8cpp.html#a231b53268229a9bc6f1b9017113bae30',1,'TEST_CASE(&quot;comparison operators between valid throwing::unique_ptr and &quot; &quot;std::unique_ptr&quot;, &quot;[unique_ptr][comparison]&quot;):&#160;unique_ptr_comparison.cpp'],['../unique__ptr__comparison_8cpp.html#a5e6832a5a32978a1bb5d42d692240f06',1,'TEST_CASE(&quot;comparison operators between valid throwing::unique_ptr and &quot; &quot;std::unique_ptr (other way)&quot;, &quot;[unique_ptr][comparison]&quot;):&#160;unique_ptr_comparison.cpp'],['../unique__ptr__comparison_8cpp.html#a44809d814efdf6b06c316d125500dee5',1,'TEST_CASE(&quot;comparison operators with null throwing::unique_ptr&quot;, &quot;[unique_ptr][comparison]&quot;):&#160;unique_ptr_comparison.cpp'],['../unique__ptr__construction_8cpp.html#adb90a7dcf89207f75e85574e4172620f',1,'TEST_CASE(&quot;unique_ptr to single object constructor from pointer&quot;, &quot;[unique_ptr][single][constructor]&quot;):&#160;unique_ptr_construction.cpp'],['../unique__ptr__construction_8cpp.html#a8375b2e6e002aca52e26a6d8ea70d4fe',1,'TEST_CASE(&quot;unique_ptr to single object move constructor&quot;, &quot;[unique_ptr][single][constructor]&quot;):&#160;unique_ptr_construction.cpp'],['../unique__ptr__construction_8cpp.html#ab07e41886ac7635c219cdfb29a16dd20',1,'TEST_CASE(&quot;unique_ptr to single object move constructor from std::unique_ptr&quot;, &quot;[unique_ptr][single][constructor]&quot;):&#160;unique_ptr_construction.cpp'],['../unique__ptr__construction_8cpp.html#ac23f3112b8f2c642a337f5c0efc2fe04',1,'TEST_CASE(&quot;unique_ptr to single object constructor from pointer and non &quot; &quot;reference deleter&quot;, &quot;[unique_ptr][single][constructor]&quot;):&#160;unique_ptr_construction.cpp'],['../unique__ptr__construction_8cpp.html#a3e5911176f46af7c27142e812098beac',1,'TEST_CASE(&quot;unique_ptr to single object constructor from pointer and reference &quot; &quot;to deleter&quot;, &quot;[unique_ptr][single][constructor]&quot;):&#160;unique_ptr_construction.cpp'],['../unique__ptr__construction_8cpp.html#a7f11f74ccb0465e343a3157cc1d0bef9',1,'TEST_CASE(&quot;unique_ptr to single object constructor from pointer and &quot; &quot;move-reference to deleter&quot;, &quot;[unique_ptr][single][constructor]&quot;):&#160;unique_ptr_construction.cpp'],['../unique__ptr__construction_8cpp.html#a862adc55ac3766b21eb922084191cf2a',1,'TEST_CASE(&quot;unique_ptr to single object constructor from convertible pointer &quot; &quot;and copied deleter&quot;, &quot;[unique_ptr][single][constructor]&quot;):&#160;unique_ptr_construction.cpp'],['../unique__ptr__construction_8cpp.html#a5ee02b73287fae70d74ee3d4b4999087',1,'TEST_CASE(&quot;unique_ptr to single object constructor from convertible object and &quot; &quot;moved deleter&quot;, &quot;[unique_ptr][single][constructor]&quot;):&#160;unique_ptr_construction.cpp'],['../unique__ptr__dereference_8cpp.html#a13c78601fb961bb23f50b459f5000a9b',1,'TEST_CASE(&quot;unique_ptr dereference via * throws on nullptr&quot;, &quot;[unique_ptr][dereference][nullptr]&quot;):&#160;unique_ptr_dereference.cpp'],['../unique__ptr__dereference_8cpp.html#aa9f17f8a0de66564a66cfe154c780a4d',1,'TEST_CASE(&quot;unique_ptr dereference via -&gt; throws on nullptr&quot;, &quot;[unique_ptr][dereference][nullptr]&quot;):&#160;unique_ptr_dereference.cpp'],['../unique__ptr__dereference_8cpp.html#a8a9261416a26f83ef69c6244434107a3',1,'TEST_CASE(&quot;type specific unique_ptr exceptions are caught by base exception&quot;, &quot;[unique_ptr][exception]&quot;):&#160;unique_ptr_dereference.cpp'],['../unique__ptr__dereference_8cpp.html#a34ae0cc370d5fddff0a511f06ddfadba',1,'TEST_CASE(&quot;type specific unique_ptr exceptions are caught by using correct type&quot;, &quot;[unique_ptr][exception]&quot;):&#160;unique_ptr_dereference.cpp'],['../unique__ptr__dereference_8cpp.html#af5378e92246c57d70fb711b69e9a18e0',1,'TEST_CASE(&quot;unique_ptr exceptions have non-empty what()&quot;, &quot;[unique_ptr][exception]&quot;):&#160;unique_ptr_dereference.cpp'],['../unique__ptr__hash_8cpp.html#a23803d61610f99877da3d0c5f2f6824d',1,'TEST_CASE(&quot;hash operator of unique_ptr&quot;, &quot;[unique_ptr][hash]&quot;):&#160;unique_ptr_hash.cpp'],['../unique__ptr__make__unique_8cpp.html#a5bd32b182bf0c0715f7b45856911fbb0',1,'TEST_CASE(&quot;make_unique struct with arguments&quot;, &quot;[unique_ptr][make_unique]&quot;):&#160;unique_ptr_make_unique.cpp'],['../unique__ptr__make__unique_8cpp.html#a99b83414344768fe8fa754f45eda0534',1,'TEST_CASE(&quot;make_unique struct with no arguments&quot;, &quot;[unique_ptr][make_unique]&quot;):&#160;unique_ptr_make_unique.cpp'],['../unique__ptr__make__unique_8cpp.html#a955800a454c860835b48511179e720d5',1,'TEST_CASE(&quot;make_unique base type with argument&quot;, &quot;[unique_ptr][make_unique]&quot;):&#160;unique_ptr_make_unique.cpp'],['../unique__ptr__make__unique_8cpp.html#a231f9826f2f2836e683a710ed17bdee0',1,'TEST_CASE(&quot;make_unique base type no arguments&quot;, &quot;[unique_ptr][make_unique]&quot;):&#160;unique_ptr_make_unique.cpp'],['../unique__ptr__make__unique_8cpp.html#ac57fcd4e5de5f3393647f885e40da8f8',1,'TEST_CASE(&quot;make_unique array of struct&quot;, &quot;[unique_ptr][make_unique][array]&quot;):&#160;unique_ptr_make_unique.cpp'],['../unique__ptr__make__unique_8cpp.html#a581cb98154d6ae799388d1bb4d478a70',1,'TEST_CASE(&quot;make_unique array of base type&quot;, &quot;[unique_ptr][make_unique][array]&quot;):&#160;unique_ptr_make_unique.cpp'],['../unique__ptr__ostream_8cpp.html#a5d662befb20bcd3ec96719b09c215678',1,'TEST_CASE(&quot;unique_ptr operator&lt;&lt; prints stored ptr&quot;, &quot;[unique_ptr][streams]&quot;):&#160;unique_ptr_ostream.cpp'],['../unique__ptr__ostream_8cpp.html#a19227af19e940465e21e0033a0a9c54f',1,'TEST_CASE(&quot;unique_ptr to array operator&lt;&lt; prints stored ptr&quot;, &quot;[unique_ptr][array][streams]&quot;):&#160;unique_ptr_ostream.cpp'],['../unique__ptr__ostream_8cpp.html#a8ef8595fa70b3cfcd48cb78fdec55287',1,'TEST_CASE(&quot;unique_ptr operator&lt;&lt; prints nullptr&quot;, &quot;[unique_ptr][streams][nullptr]&quot;):&#160;unique_ptr_ostream.cpp'],['../unique__ptr__release_8cpp.html#a7d8b162fe4d6878fea9e759df65890d5',1,'TEST_CASE(&quot;unique_ptr to single object release&quot;, &quot;[unique_ptr][release]&quot;):&#160;unique_ptr_release.cpp'],['../unique__ptr__release_8cpp.html#a9be1293862ac66b315781b0ee1d638d6',1,'TEST_CASE(&quot;unique_ptr to array release&quot;, &quot;[unique_ptr][release]&quot;):&#160;unique_ptr_release.cpp'],['../unique__ptr__reset_8cpp.html#ada5939ecf151d00215d86e56c9b3c9c2',1,'TEST_CASE(&quot;unique_ptr to single object reset&quot;, &quot;[unique_ptr][reset]&quot;):&#160;unique_ptr_reset.cpp'],['../unique__ptr__reset_8cpp.html#a57092fa080ce58568090723ee3941685',1,'TEST_CASE(&quot;unique_ptr to single object reset with nullptr&quot;, &quot;[unique_ptr][reset][nullptr]&quot;):&#160;unique_ptr_reset.cpp'],['../unique__ptr__reset_8cpp.html#af71a87a25ee1f7f31b56fa5dcea8ca74',1,'TEST_CASE(&quot;unique_ptr to array reset&quot;, &quot;[unique_ptr][array][reset]&quot;):&#160;unique_ptr_reset.cpp'],['../unique__ptr__reset_8cpp.html#aaeed9b2607ef43e183f32f84e4af1363',1,'TEST_CASE(&quot;unique_ptr to array reset with nullptr&quot;, &quot;[unique_ptr][reset][nullptr]&quot;):&#160;unique_ptr_reset.cpp'],['../unique__ptr__swap_8cpp.html#a0ff8e65b922a4480bead27620278cf47',1,'TEST_CASE(&quot;unique_ptr swap swaps pointers&quot;, &quot;[unique_ptr][swap]&quot;):&#160;unique_ptr_swap.cpp'],['../unique__ptr__swap_8cpp.html#a722ff56aeb40961d85ec92e5a2ea078f',1,'TEST_CASE(&quot;unique_ptr swap null pointers&quot;, &quot;[unique_ptr][swap][nullptr]&quot;):&#160;unique_ptr_swap.cpp'],['../unique__ptr__swap_8cpp.html#a1acfef4135379b6e199ce32da188e5dc',1,'TEST_CASE(&quot;unique_ptr to array swap swaps pointers&quot;, &quot;[unique_ptr][array][swap]&quot;):&#160;unique_ptr_swap.cpp'],['../unique__ptr__swap_8cpp.html#a20b01793a4a9a7771f2c050e37cb8884',1,'TEST_CASE(&quot;unique_ptr to array swap null pointers&quot;, &quot;[unique_ptr][array][swap][nullptr]&quot;):&#160;unique_ptr_swap.cpp'],['../unique__ptr__to__array__access_8cpp.html#a6882a3563f44966394b29fb58574b8eb',1,'TEST_CASE(&quot;unique_ptr to array: get on null returns nullptr&quot;, &quot;[unique_ptr][array][nullptr][access]&quot;):&#160;unique_ptr_to_array_access.cpp'],['../unique__ptr__to__array__access_8cpp.html#a4b7c28502ff5af51a1c0353b20929a5d',1,'TEST_CASE(&quot;unique_ptr to array: get returns first element&quot;, &quot;[unique_ptr][array][access]&quot;):&#160;unique_ptr_to_array_access.cpp'],['../unique__ptr__to__array__access_8cpp.html#afb96c7fdaee564d1b61d184d930b59c9',1,'TEST_CASE(&quot;unique_ptr to array: dereferencing nullptr throws&quot;, &quot;[unique_ptr][array][access][nullptr]&quot;):&#160;unique_ptr_to_array_access.cpp'],['../unique__ptr__to__array__access_8cpp.html#a9e540ceac6c87748bed9437432703fc6',1,'TEST_CASE(&quot;unique_ptr to array: [0] returns first element&quot;, &quot;[unique_ptr][array][access]&quot;):&#160;unique_ptr_to_array_access.cpp'],['../unique__ptr__to__array__access_8cpp.html#a68aea7e72e6a08f46a6341bf54babb22',1,'TEST_CASE(&quot;unique_ptr to array: operator bool&quot;, &quot;[unique_ptr][array][bool]&quot;):&#160;unique_ptr_to_array_access.cpp'],['../unique__ptr__to__array__assignment_8cpp.html#ac2550e8d146a8bf898ad297773e41cbf',1,'TEST_CASE(&quot;move assignment from throwing::unique_ptr to array&quot;, &quot;[unique_ptr][assignment][array]&quot;):&#160;unique_ptr_to_array_assignment.cpp'],['../unique__ptr__to__array__assignment_8cpp.html#a4024242d2223776a78bf16cdab256e62',1,'TEST_CASE(&quot;move assignment from std::unique_ptr to array&quot;, &quot;[unique_ptr][assignment][array]&quot;):&#160;unique_ptr_to_array_assignment.cpp'],['../unique__ptr__to__array__assignment_8cpp.html#a8d17bb65384a59197cde2b06194df03c',1,'TEST_CASE(&quot;assignment from nullptr to array&quot;, &quot;[unique_ptr][assignment][nullptr][array]&quot;):&#160;unique_ptr_to_array_assignment.cpp'],['../unique__ptr__to__array__assignment__from__convertible_8cpp.html#ad8353a51276f88c65a9bccdb26ea05d2',1,'TEST_CASE(&quot;move assignment from std::unique_ptr to array of convertible &quot; &quot;type to std::unique_ptr&quot;, &quot;[unique_ptr][assignment][array][conv.qual]&quot;):&#160;unique_ptr_to_array_assignment_from_convertible.cpp'],['../unique__ptr__to__array__assignment__from__convertible_8cpp.html#a23c727301b4b47bc4005eeedc24cd482',1,'TEST_CASE(&quot;move assignment from throwing::unique_ptr to array of convertible &quot; &quot;type to throwing::unique_ptr&quot;, &quot;[unique_ptr][assignment][array][conv.qual]&quot;):&#160;unique_ptr_to_array_assignment_from_convertible.cpp'],['../unique__ptr__to__array__assignment__from__convertible_8cpp.html#aa6124d58311ad866b663e3d864e876f2',1,'TEST_CASE(&quot;move assignment from std::unique_ptr to array of convertible &quot; &quot;type to throwing::unique_ptr&quot;, &quot;[unique_ptr][assignment][array][conv.qual]&quot;):&#160;unique_ptr_to_array_assignment_from_convertible.cpp'],['../unique__ptr__to__array__construction_8cpp.html#a0f18820178eac28315b95e7c318d60a1',1,'TEST_CASE(&quot;unique_ptr to array construction from pointer&quot;, &quot;[unique_ptr][array][constructor]&quot;):&#160;unique_ptr_to_array_construction.cpp'],['../unique__ptr__to__array__construction_8cpp.html#a9b19154707334cf3b36b788d3e83bd80',1,'TEST_CASE(&quot;unique_ptr to array move constructor&quot;, &quot;[unique_ptr][array][constructor]&quot;):&#160;unique_ptr_to_array_construction.cpp'],['../unique__ptr__to__array__construction_8cpp.html#a2f9cdc2a1df40421c3387adf51bc9ef6',1,'TEST_CASE(&quot;unique_ptr to array move constructor from std::unique_ptr&quot;, &quot;[unique_ptr][array][constructor]&quot;):&#160;unique_ptr_to_array_construction.cpp'],['../unique__ptr__to__array__construction_8cpp.html#a005a5f2019481a80893d921dc7c22d0f',1,'TEST_CASE(&quot;unique_ptr to array construction from pointer and non reference &quot; &quot;deleter&quot;, &quot;[unique_ptr][array][constructor]&quot;):&#160;unique_ptr_to_array_construction.cpp'],['../unique__ptr__to__array__construction_8cpp.html#a45cdf93dc15c917afa591c35eac2dda5',1,'TEST_CASE(&quot;unique_ptr to array construction from pointer and reference deleter&quot;, &quot;[unique_ptr][array][constructor]&quot;):&#160;unique_ptr_to_array_construction.cpp'],['../unique__ptr__to__array__construction_8cpp.html#a0e5e4f794b8e6d53bef680b07eafe78a',1,'TEST_CASE(&quot;unique_ptr to array construction from pointer and move reference &quot; &quot;deleter&quot;, &quot;[unique_ptr][array][constructor]&quot;):&#160;unique_ptr_to_array_construction.cpp'],['../unique__ptr__to__array__construction_8cpp.html#a04db213c3e9d9a346db430584887b922',1,'TEST_CASE(&quot;unique_ptr to array construction from convertible pointer and copy &quot; &quot;deleter&quot;, &quot;[unique_ptr][array][constructor]&quot;):&#160;unique_ptr_to_array_construction.cpp'],['../unique__ptr__to__array__construction_8cpp.html#a991bb1c74f887691cf98ad51fbe16538',1,'TEST_CASE(&quot;unique_ptr to array construction from convertible pointer and move &quot; &quot;deleter&quot;, &quot;[unique_ptr][array][constructor]&quot;):&#160;unique_ptr_to_array_construction.cpp'],['../unique__ptr__to__array__reset_8cpp.html#a4c00e1789ed301cc1fd9049781b67742',1,'TEST_CASE(&quot;unique_ptr to array reset to convertible&quot;, &quot;[unique_ptr][array][reset][conv.qual]&quot;):&#160;unique_ptr_to_array_reset.cpp']]]
];
